"""
Django settings for ops project.

Generated by 'django-admin startproject' using Django 1.11.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys
import datetime
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'd8b%_mva83f-u55@vz8euas$nhdg9cx8w&@03u$^$04(@^^w*&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ["*"]
ADMIN_LOGIN = "admin"

# Application definition

DOMAIN = "@reboot.com"

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'django_filters',
    'users.apps.UsersConfig',
    'groups.apps.GroupsConfig',
    'menu.apps.MenuConfig',
    'permissions.apps.PermissionsConfig',
    'products.apps.ProductConfig',
    'manufacturers.apps.ManufacturersConfig',
    'servers.apps.ServersConfig',
    'idcs.apps.IdcsConfig',
    'cabinet.apps.CabinetConfig',
    'rest_framework.authtoken',
    'zabbix.apps.ZabbixConfig',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True
ROOT_URLCONF = 'ops.urls'

AUTH_USER_MODEL = "users.User"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ops.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': "devops",
        'USER': 'root',
        'PASSWORD': "123456",
        'HOST': "192.168.10.10",
        'PORT': "3306",
        'OPTIONS': {
            'init_command': "SET storage_engine=INNODB;SET sql_mode='STRICT_TRANS_TABLES'"
        }
    },
   # "zabbix": {
   #     'ENGINE': 'django.db.backends.mysql',
   #     'NAME': "zabbix",
   #     'USER': 'zabbix',
   #     'PASSWORD': "zabbix",
   #     'HOST': "192.168.20.116",
   #     'OPTIONS': {
   #         'init_command': "SET storage_engine=INNODB;SET sql_mode='STRICT_TRANS_TABLES'"
   #     }
   # }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ("django_filters.rest_framework.DjangoFilterBackend",),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'ops.permissions.ModelPermissions',
    ),
    'DEFAULT_PAGINATION_CLASS': 'ops.paginations.Pagination',
    'PAGE_SIZE': 10
}


JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(minutes=360),
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
}


# zabbix
ZABBIX_API = "http://192.168.1.1/zabbix/"
ZABBIX_ADMIN_USER = "Admin"
ZABBIX_ADMIN_PASS = "zabbix"
ZABBIX_DEFAULT_HOSTGROUP = "2"



# 需要过滤掉的网卡设备名
FILTER_NETWORK_DEVICE = ["docker", "veth", "tun", "sit", "br"]


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {'format': '%(asctime)s %(levelname)s %(message)s'},
        'simple': {'format': '%(levelname)s %(message)s'},
        'default': {
            'format': '%(asctime)s [%(name)s:%(lineno)d] [%(levelname)s] - %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        }
    },
    'handlers': {
        'null': {
            'level':'DEBUG',
            'class':'logging.NullHandler',
        },
        'sentry': {
            'level': 'ERROR',
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
            'tags': {'custom-tag': 'x'},
        },
        'console':{
            'level':'DEBUG',
            'class':'logging.StreamHandler',
            'formatter': 'default'
        },
        'django':{
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'default'

        },
        'root_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'formatter': 'default',
            'filename': os.path.join(BASE_DIR, 'logs', 'server.log'),
            'when': 'D',
            'interval': 1,
            'encoding': 'utf8',
        },
        'django_request_handler':{
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'formatter': 'default',
            'filename': os.path.join(BASE_DIR, 'logs', 'request.log'),
            'when': 'D',
            'interval': 7,
            'encoding': 'utf8',
        },
        'django_db_backends_handler':{
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'formatter': 'verbose',
            'filename': os.path.join(BASE_DIR, 'logs', 'db_backends.log'),
            'when': 'D',
            'interval': 7,
        }
    },
    'loggers' : {
        'django': {
            'level': 'DEBUG',
            'handlers': ['django'],
            'propagate': False
        },
        'django.request': {
            'handlers': ['django_request_handler'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.db.backends':{
            'handlers': ['django_db_backends_handler'],
            'level': 'DEBUG',
            'propagate': False,
        }
    },
    'root':{
        'level': 'DEBUG',
        'handlers': ['root_handler']
    }
}

LOGGING = {}